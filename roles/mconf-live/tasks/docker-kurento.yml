- name: Stop kurento
  become: yes
  service: name=kurento-media-server state=stopped enabled=false

- name: Get memory
  shell: cat /proc/meminfo | grep 'MemTotal:' | tr -s ' ' | cut -d' ' -f2
  register: memory_raw

  # kurento will use 1/4 of the server total memory
- name: Determine amount of memory for Kurento
  set_fact:
    kurento_memory: '{{ ( memory_raw.stdout|int / 4096 )|int }}'

- name: Get number of cores
  shell: "grep -c ^processor /proc/cpuinfo"
  register: num_proc_auto_raw

- name: Determine number of kurento instances, in case it isn't set
  set_fact:
    num_proc_auto: '{{ [ num_proc_auto_raw.stdout|int, 2 ] | min }}'

- name: Determine number of kurento instances
  set_fact:
    num_proc: '{{ bigbluebutton_docker_kurento_instances | default(num_proc_auto, true) }}'

- name: Determine kurento ports
  set_fact:
    kurento_ports: '{{ kurento_ports|default([]) + [ (bigbluebutton_docker_kurento_first_port|int + item|int)|string ] }}'
  with_sequence: start=0 count={{ num_proc }}

- name: Determine kurento running instances
  shell: docker ps -a | grep 'kurento_' | sed 's:.*kurento_\(.*\)$:\1:g' | sort
  register: running_kurento_raw

- name: Stop kurento instances that we don't need
  docker_container:
    name: kurento_{{ item }}
    state: absent
  with_items: '{{ running_kurento_raw.stdout_lines | difference(kurento_ports) }}'

- name: Determine kurento URLs to configure bbb-webrtc-sfu
  set_fact:
    kurento_config: "{{ kurento_config|default([]) + [ { 'ip': kurento_ip, 'url': 'ws://' + docker_ip + ':' + item + '/kurento' } | combine( { 'ipClassMapping': ip_mappings } ) ] }}"
  with_items: '{{ kurento_ports }}'

- name: Stop kurento health monitor
  docker_container:
    name: kurento-health-monitor
    state: stopped
  ignore_errors: yes

- set_fact:
    kms_need_stun: '{{ ansible_default_ipv4.address != external_ip }}'
- set_fact:
    kms_stun_server_ip: '{% if kms_need_stun %}{{ stun_server_ip }}{% endif %}'
    kms_stun_server_port: '{% if kms_need_stun %}{{ stun_server_port }}{% endif %}'

- name: Start kurento containers
  docker_container:
    name: kurento_{{ item }}
    image: '{{ bigbluebutton_docker_kurento_image }}'
    pull: yes
    restart_policy: always
    network_mode: host
    memory: '{{ kurento_memory }}M'
    volumes:
      - /var/kurento:/var/kurento
      - /var/log/kurento-media-server:/var/log/kurento-media-server
    env:
      PORT: '{{ item }}'
      RTP_MIN_PORT: '{{ bigbluebutton_kms_udp_range_begin | string }}'
      RTP_MAX_PORT: '{{ ( bigbluebutton_kms_udp_range_end - bigbluebutton_docker_mcs_bfcp_num_ports ) | string }}'
      KURENTO_LOGS_PATH: /var/log/kurento-media-server
      STUN_IP: '{{ kms_stun_server_ip | default(omit) }}'
      STUN_PORT: '{{ kms_stun_server_port | string | default(omit, true) }}'
      GST_DEBUG: '3,Kurento*:4,kms*:4,KurentoWebSocketTransport:5'
      TZ: '{{ lookup("file", "/etc/timezone") }}'
    labels:
      hostname: '{{ inventory_hostname }}'
  with_items: '{{ kurento_ports }}'
  notify: restart docker components

- name: Start kurento health monitor
  docker_container:
    name: kurento-health-monitor
    state: started
  ignore_errors: yes

- name: Remove old images
  shell: docker images {{ bigbluebutton_docker_kurento_image.split(":")[0] }} --filter 'before={{ bigbluebutton_docker_kurento_image }}' -q | xargs -r docker rmi --force
  notify: clean docker

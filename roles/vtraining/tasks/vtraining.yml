- git:
    repo: git@bitbucket.org:i9access/mirtrainer.git
    dest: '{{ ansible_env.HOME }}/dev/vtraining'
    version: feature-rec
    accept_hostkey: true
    recursive: false
    update: false

- name: Change bigbluebutton route
  lineinfile:
    dest: '{{ ansible_env.HOME }}/dev/vtraining/config/routes.rb'
    state: present
    regexp: '^  bigbluebutton_routes :default'
    line: "  bigbluebutton_routes :default, scope: 'bbb_route', as: 'bigbluebutton'"

- name: Add gem 'pg'
  lineinfile:
    dest: '{{ ansible_env.HOME }}/dev/vtraining/Gemfile'
    state: present
    regexp: ".*gem 'pg'"
    line: "gem 'pg'"
  tags:
    - debug

- template:
    src: files/vtraining-portal/secrets.yml.j2
    dest: '{{ ansible_env.HOME }}/dev/vtraining/config/secrets.yml'
    mode: '0644'

- copy:
    src: 'files/vtraining-portal/database.yml'
    dest: '{{ ansible_env.HOME }}/dev/vtraining/config/'
    mode: '0644'

- name: Install VTraining dependencies
  become: yes
  apt:
    name: '{{ item }}'
    state: present
  with_items:
    - postgresql-server-dev-9.3
    - postgresql-contrib-9.3
    - zlib1g-dev
    - build-essential
    - libreadline-dev
    - libssl-dev
    - redis-server

- name: Install VTraining ruby dependencies
  command: '{{ item }}'
  args:
    chdir: '{{ ansible_env.HOME }}/dev/vtraining'
  with_items:
    - gem install bundler
    - bundle install
  environment:
    PATH: '{{ ansible_env.HOME }}/.rbenv/shims:{{ ansible_env.PATH }}'

- name: Set locales
  lineinfile:
    dest: '/etc/default/locale'
    state: present
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  become: yes
  with_items:
    - { regexp: '^LANGUAGE=', line: 'LANGUAGE="en_US.UTF-8"' }
    - { regexp: '^LC_ALL=', line: 'LC_ALL="en_US.UTF-8"' }

- name: Test postgres cluster
  command: pg_lsclusters -h
  register: postgres_cluster
  become: yes

- name: Create postgres cluster
  command: pg_createcluster 9.3 main --start
  become: yes
  when: postgres_cluster.stdout_lines|length == 0

- service:
    name: postgresql
    state: started
    enabled: yes
  become: yes

- name: Test user
  command: bash -c 'psql -c "\du" | cut -d \| -f 1 | grep -qw vtraining'
  become: yes
  become_user: postgres
  register: postgres_user
  ignore_errors: yes

- name: Create user
  command: psql -c "create user vtraining with password 'vtraining';"
  become: yes
  become_user: postgres
  when: postgres_user|failed

- name: Create role and template
  command: '{{ item }}'
  become: yes
  become_user: postgres
  with_items:
    - psql -c "alter role vtraining createrole createdb;"
    - psql template1 -c "create extension if not exists hstore;"

- name: Test database
  command: bash -c 'psql -lqt | cut -d \| -f 1 | grep -qw vtraining_development'
  become: yes
  become_user: postgres
  register: postgres_database
  ignore_errors: yes

- name: Create database
  command: psql -c "create database vtraining_development owner vtraining;"
  become: yes
  become_user: postgres
  when: postgres_database|failed

- name: Seed database
  command: bundle exec rake {{ item }} RAILS_ENV=development
  args:
    chdir: '{{ ansible_env.HOME }}/dev/vtraining'
  with_items:
    - db:migrate
    - db:seed
  when: postgres_database|failed
  environment:
    PATH: '{{ ansible_env.HOME }}/.rbenv/shims:{{ ansible_env.PATH }}'

- template:
    src: files/vtraining.upstart.j2
    dest: /etc/init/vtraining.conf
    mode: 0644
  become: yes

- service:
    name: vtraining
    pattern: vtraining
    state: started
    enabled: yes
  become: yes

- include: vtraining-rec.yml
  tags: [vtraining-rec]

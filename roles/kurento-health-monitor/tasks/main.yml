---

- name: Determine external IP
  set_fact:
    external_ip: "{{ lookup('pipe', 'dig {{ inventory_hostname }} @8.8.8.8 A +short | grep \"[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\" | head -n 1') }}"
  when: external_ip is none
- name: Set external IP as internal IP if nothing returns from dig
  set_fact:
    external_ip: '{{ ansible_default_ipv4.address }}'
  when: external_ip is none or external_ip | trim == ""

- name: Determine kurento running instances
  shell: docker ps -a | grep 'kurento_' | sed 's:.*kurento_\([0-9]*\).*:\1:g' | sort
  register: running_kurento_raw

- set_fact:
    kurento_ip: "{% if bigbluebutton_kurento_use_internal_ip %}{{ ansible_default_ipv4.address }}{% else %}{{ external_ip }}{% endif %}"
    kurento_ports: '{{ running_kurento_raw.stdout_lines }}'
    kurento_config: []

- name: Determine kurento URLs to configure kurento health monitor
  set_fact:
    kurento_config: "{{ kurento_config|default([]) + [ { 'ip': kurento_ip, 'url': 'ws://' + ansible_docker0.ipv4.address + ':' + item + '/kurento' } ] }}"
  with_items: '{{ kurento_ports }}'

- name: Start kurento health monitor
  docker_container:
    name: kurento-health-monitor
    image: '{{ kurento_health_monitor_image }}'
    pull: yes
    restart_policy: always
    memory: 128M
    env:
      KURENTO: '{{ kurento_config | to_json }}'
      WEBHOOK_URL: '{{ kurento_health_monitor_webhook }}'
      HOST_ADDRESS: '{{ inventory_hostname }}'
      ESL_IP: '{{ ansible_docker0.ipv4.address }}'
      ESL_PORT: '8021'
    labels:
      hostname: '{{ inventory_hostname }}'
    state: '{% if kurento_health_monitor_enabled %}started{% else %}stopped{% endif %}'

- name: Remove old images
  shell: docker images {{ kurento_health_monitor_image.split(":")[0] }} --filter 'before={{ kurento_health_monitor_image }}' -q | xargs -r docker rmi --force
  notify: clean docker

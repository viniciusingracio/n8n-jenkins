- name: Read BigBlueButton source file
  slurp:
    src: /etc/apt/sources.list.d/bigbluebutton.list
  register: slurpfile
  ignore_errors: yes
  when: bigbluebutton_apt_clean_installation|bool

- set_fact:
    current_apt_source: '{{ slurpfile["content"] | b64decode | regex_replace("\n") }}'
  when: bigbluebutton_apt_clean_installation|bool and slurpfile is succeeded and not slurpfile is skipped

- include: clean-installation.yml
  when: bigbluebutton_apt_clean_installation|bool and slurpfile is succeeded and current_apt_source != bigbluebutton_apt_source

- name: Update apt (if older than 60m)
  become: yes
  apt: update_cache=yes cache_valid_time=3600

- name: Install language pack
  become: yes
  apt:
    name: language-pack-en
    state: '{{ bigbluebutton_apt_state }}'
    autoremove: yes

- name: Install entropy daemon
  become: yes
  apt:
    name: haveged
    state: '{{ bigbluebutton_apt_state }}'

- name: Enable haveged daemon
  service:
    name: haveged
    state: started
    enabled: yes
  become: yes

- name: Accept mscorefonts EULA
  become: yes
  shell: echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | debconf-set-selections

- name: Generate locales
  become: yes
  command: locale-gen en_US.UTF-8

- name: Reconfigure locales
  become: yes
  command: dpkg-reconfigure --frontend=noninteractive locales

- name: Set default locale
  become: yes
  command: update-locale LANG=en_US.UTF-8

- name: Add BigBlueButton apt key
  become: yes
  apt_key:
    url: '{{ item }}'
    state: present
  with_items:
    - '{{ bigbluebutton_apt_key }}'
    - https://deb.nodesource.com/gpgkey/nodesource.gpg.key

- name: Find repos to remove
  command: grep -l 'jenkins-live.mconf.com' /etc/apt/sources.list.d -R
  register: jenkins_repos
  ignore_errors: yes

- name: Clear repos
  become: yes
  file:
    path: '{{ item }}'
    state: absent
  with_items: "{{ jenkins_repos.stdout_lines | default([]) + [ '/etc/apt/sources.list.d/archive_ubuntu_com_ubuntu.list', '/etc/apt/sources.list.d/deb_nodesource_com_node_8_x.list' ] | list }}"

- name: Add multiverse and BigBlueButton repos to apt
  become: yes
  apt_repository:
    repo: '{{ item.repo }}'
    filename: '{{ item.filename }}'
    mode: '0644'
    state: present
  with_items:
    - { repo: 'deb http://archive.ubuntu.com/ubuntu/ {{ ansible_lsb.codename }} universe multiverse', filename: 'ubuntu' }
    - { repo: 'deb http://archive.ubuntu.com/ubuntu/ {{ ansible_lsb.codename }}-security universe multiverse', filename: 'ubuntu_security' }
    - { repo: 'deb http://archive.ubuntu.com/ubuntu/ {{ ansible_lsb.codename }}-updates universe multiverse', filename: 'ubuntu_updates' }
    - { repo: '{{ bigbluebutton_apt_source }}', filename: '{{ bigbluebutton_apt_package }}' }
    - { repo: 'deb http://deb.nodesource.com/node_8.x {{ ansible_lsb.codename }} main', filename: 'node' }
    - { repo: 'ppa:rmescandon/yq', filename: 'yq' }
    - { repo: 'ppa:nginx/stable', filename: 'nginx' }
    - { repo: 'ppa:bigbluebutton/support', filename: 'bigbluebutton_support' }

- name: Update apt if keys changed
  become: yes
  apt: update_cache=yes

- name: Remove kurento-media-server-6.0
  become: yes
  apt:
    name: kurento-media-server-6.0
    state: absent
    autoremove: yes

- service:
    name: kurento-media-server-6.0
    state: stopped
  become: yes
  ignore_errors: yes

- file:
    name: /etc/init.d/kurento-media-server-6.0
    state: absent
  become: yes

- name: Install BigBlueButton
  become: yes
  apt:
    name: '{{ bigbluebutton_apt_package }}'
    state: '{{ bigbluebutton_apt_state }}'
  notify: restart bigbluebutton

- name: Install bbb-webrtc-sfu
  become: yes
  apt:
    name: bbb-webrtc-sfu
    state: '{{ bigbluebutton_apt_state }}'
  when: not bigbluebutton_docker_webrtc_sfu_enabled

# - name: Auto-remove to avoid no space left on /boot
#   become: yes
#   command: apt-get -y autoremove

- name: Upgrade packages to make sure BigBlueButton packages are updated
  become: yes
  apt:
    upgrade: safe
    autoremove: yes
    dpkg_options: force-confnew
  when: bigbluebutton_apt_state == 'latest'
  notify: restart bigbluebutton

- name: Install bbb-playback
  become: yes
  apt:
    name: bbb-playback
    state: '{{ bigbluebutton_apt_state }}'

- name: Check if bbb-web is running on a standalone app
  stat:
    path: /usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties
  register: reg_standalone
- set_fact:
    bigbluebutton_servlet_dir: /usr/share/bbb-web
  when: reg_standalone.stat.exists
- set_fact:
    bigbluebutton_servlet_dir: /var/lib/tomcat7/webapps/bigbluebutton
  when: not reg_standalone.stat.exists

- name: Determine if reset encoding needed on bigbluebutton.properties
  set_fact:
    properties_charset: 'iso-8859-1'

- name: Create certs directory for nginx
  file:
    path: /etc/nginx/ssl
    recurse: yes
    state: directory
  become: yes

- name: Generate dhparam
  command: openssl dhparam -out /etc/nginx/ssl/dhp-2048.pem 2048
  args:
    creates: /etc/nginx/ssl/dhp-2048.pem
  become: yes
  notify: reload nginx

- name: Copy certificates
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  become: yes
  with_items:
    - { src: '{{ bigbluebutton_local_ssl_certificate }}', dest: '{{ bigbluebutton_ssl_certificate }}' }
    - { src: '{{ bigbluebutton_local_ssl_certificate_key }}', dest: '{{ bigbluebutton_ssl_certificate_key }}' }
  when: not bigbluebutton_local_ssl_certificate is none and not bigbluebutton_local_ssl_certificate_key is none
  ignore_errors: yes
  notify: reload nginx

- name: Determine if use self signed certificate
  set_fact:
    use_self_signed_certificate: '{{ bigbluebutton_local_ssl_certificate is none and not certbot_enabled | bool }}'

- include: self-signed-certs.yml
  when: use_self_signed_certificate|bool

- name: Add ssl configuration on nginx
  blockinfile:
    dest: /etc/nginx/sites-available/bigbluebutton
    block: |2
           listen 443 ssl;
           listen [::]:443 ssl;
           ssl_certificate {{ bigbluebutton_ssl_certificate }};
           ssl_certificate_key {{ bigbluebutton_ssl_certificate_key }};
           ssl_session_cache shared:SSL:10m;
           ssl_session_timeout 10m;
           # need TLSv1 for the Java calls for the API, otherwise it would be removed
           # ssl_protocols TLSv1.2;
           # https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/
           # ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
           ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
           ssl_prefer_server_ciphers on;
           ssl_dhparam /etc/nginx/ssl/dhp-2048.pem;
           ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
           ssl_session_tickets off; # Requires nginx >= 1.5.9
           ssl_stapling on; # Requires nginx >= 1.3.7
           ssl_stapling_verify on; # Requires nginx => 1.3.7
           add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

           # define an upload limit for the whole site
           client_max_body_size 30m;
    insertafter: '.*server_name .*'
    marker: '     # {mark} ANSIBLE MANAGED BLOCK'
  become: yes
  notify: reload nginx

- name: Set server_name on nginx
  replace:
    path: /etc/nginx/sites-available/bigbluebutton
    regexp: '^([ \t]*server_name)[ \t]?.*'
    replace: '\1 {{ inventory_hostname }};'
  become: yes
  notify: reload nginx

- name: Install demos
  become: yes
  apt:
    name: bbb-demo
    state: '{{ bigbluebutton_apt_state }}'
  when: bigbluebutton_demos|bool
  register: reg_demo

- name: Restart tomcat7
  become: yes
  service:
    name: tomcat7
    state: restarted
  when: reg_demo.changed

- name: Wait until demo is deployed before continuing
  wait_for:
    path: /var/lib/tomcat7/webapps/demo/bbb_api_conf.jsp
  when: bigbluebutton_demos|bool

- name: Copy demo0
  become: yes
  copy:
    src: files/demo0.jsp
    dest: /var/lib/tomcat7/webapps/demo/demo0.jsp
  when: bigbluebutton_demos|bool

- name: Remove demos
  become: yes
  apt:
    name: bbb-demo
    state: absent
  when: not bigbluebutton_demos|bool

- name: Make sure demo is removed
  file:
    path: /var/lib/tomcat7/demo
    state: absent
  become: yes
  when: not bigbluebutton_demos|bool

- name: Get BigBlueButton secret
  shell: cat {{ bigbluebutton_servlet_dir }}/WEB-INF/classes/bigbluebutton.properties | grep '^securitySalt=' | cut -d'=' -f2
  register: reg_bbb_secret

- name: Get BigBlueButton URL
  shell: cat {{ bigbluebutton_servlet_dir }}/WEB-INF/classes/bigbluebutton.properties | grep '^bigbluebutton.web.serverURL=' | cut -d'=' -f2 | awk '{print $1"/bigbluebutton/"}'
  register: reg_bbb_url

- name: Determine if setip is needed
  set_fact:
    setip_needed: '{{ not reg_bbb_url.stdout is search("http[s]?://" + inventory_hostname) }}'
    bbb_url: '{{ reg_bbb_url.stdout }}'
    bbb_secret: '{{ reg_bbb_secret.stdout }}'

- name: bbb-conf --setip
  become: yes
  command: bbb-conf --setip '{{ inventory_hostname }}'
  when: setip_needed|bool

- name: Get BigBlueButton secret again
  shell: cat {{ bigbluebutton_servlet_dir }}/WEB-INF/classes/bigbluebutton.properties | grep '^securitySalt=' | cut -d'=' -f2
  register: reg_bbb_secret
  when: setip_needed|bool

- name: Get BigBlueButton URL again
  shell: cat {{ bigbluebutton_servlet_dir }}/WEB-INF/classes/bigbluebutton.properties | grep '^bigbluebutton.web.serverURL=' | cut -d'=' -f2 | awk '{print $1"/bigbluebutton/"}'
  register: reg_bbb_url
  when: setip_needed|bool

- name: Determine URL and secret again
  set_fact:
    bbb_url: '{{ reg_bbb_url.stdout }}'
    bbb_secret: '{{ reg_bbb_secret.stdout }}'
  when: setip_needed|bool

- name: Configure akka apps
  become: yes
  lineinfile:
    dest: /usr/share/bbb-apps-akka/conf/application.conf
    state: present
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  with_items:
    - { regexp: 'bbbWebAPI[ ]*=', line: '  bbbWebAPI = "{{ bbb_url }}api"' }
    - { regexp: 'sharedSecret[ ]*=', line: '  sharedSecret = "{{ bbb_secret }}"' }
    - { regexp: 'deskshareip[ ]*=', line: '  deskshareip = "{{ inventory_hostname }}"' }
    - { regexp: 'recordCodec[ ]*=', line: '  recordCodec = "opus"' }
    - { regexp: 'inactivity[ ]*=', line: '  inactivity = 3600' }
  notify: restart bigbluebutton

# TODO move this to a new role/task
- name: Install dependency for yedit library
  become: yes
  pip:
    name: ruamel.yaml
    version: 0.15.37
    state: present

- name: Adjust bigbluebutton.yml
  become: yes
  yedit:
    src: /usr/local/bigbluebutton/core/scripts/bigbluebutton.yml
    edits:
    - { key: 'playback_host', value: '{{ bigbluebutton_playback_host | default(inventory_hostname, true) }}' }
    - { key: 'playback_protocol', value: '{{ bigbluebutton_playback_protocol | default("https", true) }}' }
    state: present

- name: Set HTTPS on bigbluebutton.properties
  replace:
    path: '{{ item[0] }}'
    regexp: '{{ item[1].regexp }}'
    replace: '{{ item[1].replace }}'
    encoding: '{{ properties_charset }}'
  with_nested:
    -
      - '{{ bigbluebutton_servlet_dir }}/WEB-INF/classes/bigbluebutton.properties'
      - /var/lib/tomcat7/webapps/demo/bbb_api_conf.jsp
    -
      - { regexp: 'http[s]?:\/\/{{ inventory_hostname }}', replace: 'https://{{ inventory_hostname }}' }
      - { regexp: 'http[s]?:\/\/{{ ansible_default_ipv4.address }}', replace: 'https://{{ inventory_hostname }}' }
      - { regexp: 'rtmp:\/\/{{ ansible_default_ipv4.address }}', replace: 'rtmp://{{ inventory_hostname }}' }
  ignore_errors: yes
  become: yes
  notify: restart bigbluebutton

- name: Set HTTPS on bigbluebutton.properties
  replace:
    path: '{{ item[0] }}'
    regexp: '{{ item[1].regexp }}'
    replace: '{{ item[1].replace }}'
    encoding: '{{ properties_charset }}'
  with_nested:
    -
      - /usr/share/red5/webapps/screenshare/WEB-INF/screenshare.properties
    -
      - { regexp: 'http[s]?:\/\/{{ inventory_hostname }}', replace: 'https://{{ inventory_hostname }}' }
      - { regexp: 'http[s]?:\/\/{{ ansible_default_ipv4.address }}', replace: 'https://{{ inventory_hostname }}' }
      - { regexp: 'rtmp:\/\/{{ ansible_default_ipv4.address }}', replace: 'rtmp://{{ inventory_hostname }}' }
  ignore_errors: yes
  become: yes
  notify: restart bigbluebutton
  when: not bigbluebutton_html5_only|bool

- copy:
    src: '{{ bigbluebutton_html5_local_default_logo }}'
    dest: '{{ bigbluebutton_html5_remote_default_logo }}'
  become: yes
  when: not bigbluebutton_html5_local_default_logo is none and not bigbluebutton_html5_remote_default_logo is none

- set_fact:
    bigbluebutton_properties_config: "{{ bigbluebutton_properties_config + bigbluebutton_properties_config_custom }}"
- set_fact:
    bigbluebutton_properties_config: "{{ bigbluebutton_properties_config + [ item ] }}"
  with_items:
    - { key: 'allowRequestsWithoutSession', value: '{{ not bigbluebutton_html5_require_cookie }}' }
    - { key: 'breakoutRoomsEnabled', value: '{{ bigbluebutton_html5_breakout_rooms_enabled }}' }
    - { key: 'lockSettingsDisableCam', value: '{{ bigbluebutton_html5_lock_settings_cam }}' }

- name: Customize bigbluebutton.properties
  replace:
    path: '{{ bigbluebutton_servlet_dir }}/WEB-INF/classes/bigbluebutton.properties'
    regexp: '^({{ item.key }})=.*'
    replace: '\1={{ item.value }}'
    encoding: '{{ properties_charset }}'
  with_items: '{{ bigbluebutton_properties_config }}'
  when: not item.value is none
  become: yes
  notify: restart bigbluebutton

- name: Determine external IP
  set_fact:
    external_ip: "{{ lookup('pipe', 'dig {{ inventory_hostname }} @8.8.8.8 A +short | grep \"[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\" | head -n 1') }}"
  when: external_ip is none
- name: Set external IP as internal IP if nothing returns from dig
  set_fact:
    external_ip: '{{ ansible_default_ipv4.address }}'
  when: external_ip is none or external_ip | trim == ""

# http://docs.bigbluebutton.org/install/install.html#configure-a-dummy-nic-if-required
- name: Check if external IP is accessible
  command: 'curl --max-time 5 --trace-ascii - -k https://{{ external_ip }}:443/favicon.ico'
  ignore_errors: yes
  register: reg_external_ip_access

- name: Restart nginx just to make sure
  become: yes
  service:
    name: nginx
    state: restarted
  when: reg_external_ip_access is failed

- name: Check if external IP is accessible again
  command: 'curl --max-time 5 --trace-ascii - -k https://{{ external_ip }}:443/favicon.ico'
  ignore_errors: yes
  register: reg_external_ip_access
  when: reg_external_ip_access is failed

- name: Check if external IP is assigned to any interface
  shell: ip addr | grep 'inet {{ external_ip }}'
  ignore_errors: yes
  register: reg_external_ip_assigned

- name: Add dummy NIC
  command: 'ip addr add {{ external_ip }}/32 dev lo'
  become: yes
  when: reg_external_ip_assigned is failed or reg_external_ip_access is failed

- name: Add dummy NIC to network interfaces
  blockinfile:
    dest: /etc/network/interfaces
    block: |2
              post-up ip addr add {{ external_ip }}/32 dev lo
              pre-down ip addr del {{ external_ip }}/32 dev lo
    insertafter: 'iface lo inet loopback'
    marker: '        # {mark} ANSIBLE MANAGED BLOCK'
  become: yes
  when: reg_external_ip_assigned is failed or reg_external_ip_access is failed

- name: Confirm if external IP is accessible
  command: 'curl --max-time 5 --trace-ascii - -k https://{{ external_ip }}:443/favicon.ico'

- name: Set HTTPS on sip.nginx
  replace:
    path: '/etc/bigbluebutton/nginx/sip.nginx'
    regexp: 'http[s]?:\/\/[0-9\.]*:\d+'
    replace: 'https://{{ external_ip }}:7443'
  become: yes
  notify: reload nginx

- name: Update bbb-webrtc-sfu config
  yedit:
    src: /usr/local/bigbluebutton/bbb-webrtc-sfu/config/default.yml
    edits:
    - { key: 'minVideoPort', value: '{{ bigbluebutton_html5_udp_range_begin }}' }
    - { key: 'maxVideoPort', value: '{{ bigbluebutton_html5_udp_range_end }}' }
    - { key: 'kurentoIp', value: '{{ external_ip }}' }
    - { key: 'localIpAddress', value: '{{ external_ip }}' }
    - { key: 'acceptSelfSignedCertificate', value: '{{ use_self_signed_certificate }}' }
    - { key: 'mediaFlowTimeoutDuration', value: '15000' }
    - { key: 'websocketPongTimeout', value: '15000' }
    - { key: 'common-message-version', value: '{% if bigbluebutton_html5 %}2.x{% else %}1.x{% endif %}' }
    - { key: 'freeswitch.ip', value: '{{ ansible_default_ipv4.address }}' }
    - { key: 'kurentoUrl', value: 'ws://{{ ansible_default_ipv4.address }}:8888/kurento' }
    - { key: 'recordScreenSharing', value: '{% if bigbluebutton_html5 %}true{% else %}false{% endif %}' }
    - { key: 'recordWebcams', value: '{% if bigbluebutton_html5 %}true{% else %}false{% endif %}' }
    - { key: 'kurento-websocket-pool-size', value: '1' }
    - { key: 'maxAudioConnections', value: '300' }
    state: present
  become: yes
  when: not bigbluebutton_docker_webrtc_sfu_enabled
  notify: restart bbb-webrtc-sfu

- name: Open/close redis
  become: yes
  lineinfile:
    dest: /etc/redis/redis.conf
    state: present
    regexp: '^bind\s'
    line: 'bind {{ bigbluebutton_redis_bind | join(" ") }}'
  when: bigbluebutton_redis_bind|length > 0
  notify: restart redis

- name: Close redis to localhost
  become: yes
  lineinfile:
    dest: /etc/redis/redis.conf
    state: present
    regexp: '^bind\s'
    line: 'bind 127.0.0.1'
  when: bigbluebutton_redis_bind|length == 0
  notify: restart redis

- name: Copy presentation
  copy:
    src: '{{ bigbluebutton_default_presentation }}'
    dest: /var/www/bigbluebutton-default/default.pdf
  when: not bigbluebutton_default_presentation is none
  become: yes

- include: cron.yml

- include: stun.yml

- include: freeswitch.yml

- include: config-xml.yml
  when: not bigbluebutton_html5_only|bool

- include_role:
    name: bigbluebutton-webhooks

- include: html5.yml
  when: bigbluebutton_html5

- include: sip.yml
  when: bigbluebutton_sip and not bigbluebutton_docker_mcs_sip_enabled

- include: branding.yml
  tags:
    - branding

- include: ufw.yml
  when: common_ufw_enabled
  tags: [ufw,firewall]

- include: zabbix.yml
  when: bigbluebutton_zabbix_copy_scripts or zabbix_agent_enabled
  tags: [zabbix]

# - include: rap-resque.yml
#   tags: [rap]

- name: Copy scripts for recordings
  synchronize:
    src: files/utils/
    dest: /usr/local/bigbluebutton/core/scripts/utils/
    use_ssh_args: yes
  become: yes
  retries: 40
  delay: 2
  register: task_result
  until: task_result.rc == 0

- name: Install cron job to remove media files from non-recorded meetings
  cron:
    name: remove norecord
    special_time: hourly
    job: /usr/bin/ruby /usr/local/bigbluebutton/core/scripts/utils/remove-norecord.rb
    user: root
    state: '{% if bigbluebutton_retention_unrecorded == 0 %}present{% else %}absent{% endif %}'
  become: yes

- name: Install cron job to remove media files already archived
  cron:
    name: remove archived
    special_time: hourly
    job: /usr/bin/ruby /usr/local/bigbluebutton/core/scripts/utils/clean-recordings-data.rb
    user: root
  become: yes

- name: Install cron job to remove encrypted files after 7 days
  cron:
    name: remove encrypted
    special_time: daily
    job: /usr/local/bigbluebutton/core/scripts/utils/remove-encrypted.sh
    user: root
  become: yes

- set_fact:
    restart_mconf_command: /usr/local/bigbluebutton/core/scripts/utils/restart-mconf.sh >> /var/log/restart-mconf.log 2>&1
- set_fact:
    restart_mconf_command: /usr/bin/ruby /usr/local/bigbluebutton/core/scripts/utils/abort-if-meetings-running.rb && {{ restart_mconf_command }}
  when: bigbluebutton_skip_restart_if_meetings_running | bool
- set_fact:
    restart_mconf_command: '{{ restart_mconf_command }}; systemctl stop red5 bbb-transcode-akka; systemctl disable red5 bbb-transcode-akka'
  when: bigbluebutton_html5_only

- name: Install cron job to restart KMS daily
  cron:
    name: restart kms
    minute: '0'
    hour: '4'
    user: root
    state: absent
  become: yes

- name: Install cron job to restart Mconf daily
  cron:
    name: restart mconf
    minute: '0'
    hour: '4'
    job: '{{ restart_mconf_command }}'
    user: root
  become: yes

- include: tune-so.yml

- include: storage-partition.yml
  when: bigbluebutton_storage_dir is not none
  tags: [storage]

- include: log.yml

- file:
    path: /etc/systemd/system/bbb-fsesl-akka.service.d
    state: directory
  become: yes

- name: Copy fsesl-akka systemd restart file
  copy:
    src: bbb-fsesl-akka-restart.conf
    dest: /etc/systemd/system/bbb-fsesl-akka.service.d/bbb-fsesl-akka-restart.conf
  become: yes
  notify: reload systemctl daemon

- include: nginx.yml

- include: dtls-srtp.yml

# - name: Check if reboot is required
#   stat:
#     path: /var/run/reboot-required
#   register: reg_reboot
#
# - name: Notify when reboot is required
#   command: 'true'
#   notify: reboot
#   when: reg_reboot.stat.exists
